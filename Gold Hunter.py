# Охотник за сокровищами

import random
import sys
import math

# функция создания списка списков, для последующей отрисовки поля
def getNewBoard():
    board = []
    for x in range(60):  # Главный список из 60 списков. Т.к. у нас 60 элементов в строке (60 столбцов)
        board.append([])
        for y in range(15):  # Каждый список в главном списке содержит 15 односимвольных строк.
            # океан заполняется рандомом
            if random.randint(0, 1) == 0:
                board[x].append('~')
            else:
                board[x].append('`')
    return board

#отрисовка самого поля
def drawBoard(board):
    #Создаем место под отрисовку оси У слева от игрового поля
    tensDigitsLine = ' '
    #теперь рисуем верхнюю часть поля, ось Х - десятки
    for i in range(1, 6):
        tensDigitsLine += (' ' * 9) + str(i)

    # вывод оси Х - единицы
    print(tensDigitsLine)
    print(' ' + ('0123456789' * 6))
    print()
    # Нарисуем океан.
    for row in range(15): # внешний цикл по строкам
        # добавление пробела к однозначным числам, иначе ряды будут кривые
        if row < 10:
            Space = ' '
        else:
            Space = ''

        # Создать столбец для этого ряда на игровом поле.
        boardRow = ''
        for column in range(60):
            boardRow += board[column][row]

        print('%s%s %s %s' % (Space, row, boardRow, row))

    # Вывод оси Х в нижней части игрового поля.
    print()
    print(' ' + ('0123456789' * 6))
    print(tensDigitsLine)

# Функция создания сундуков с сокровищами. Делаем как список списков.
# numChest - передали кол-во сундуков. Их 3 штуки
def getRandomChests(numChests):
    chests = [] #основной список
    while len(chests) < numChests: #элементов в списке меньше указанных 3 т.к. нумерация с 0
        newChest = [random.randint(0, 59), random.randint(0, 14)] #создаем список из рандомных координат
        if newChest not in chests:  # Убедиться, что сундука здесь еще нет. Сверка что не продублированы координаты
            chests.append(newChest)
    return chests


def isOnBoard(x, y):
    #Функция проверки корректности ввода координат.
    # Возвращать True, если координаты соответствуют размеру поля иначе - False.
    return x >= 0 and x <= 59 and y >= 0 and y <= 14


def makeMove(board, chests, x, y):
    smallestDistance = 100  # Условная величина минимальной дистанции до сундука
    # в Chest у нас лежать координаты сундуков
    # ищем в цикле самый короткий путь до сундуков
    # используем теорему Пифагора

    #сх и су - координаты сундуков. x и y это координаты введеные пользователем
    for cx, cy in chests:
        distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y))

        if distance < smallestDistance:  # Каждый раз при нахождении миню пути обновляем переменную
            smallestDistance = distance

    smallestDistance = round(smallestDistance) # ну и округляем конечно же

    if smallestDistance == 0: # Координаты пользователя полностью совпали с координатами сундука
        chests.remove([x, y]) #удаляем координаты найденного сундука
        return 'Вы нашли сундук с сокровищами на затонувшем судне!'
    else:
        if smallestDistance < 10:
            board[x][y] = str(smallestDistance) #в списки с морем отрисовываем вместо символа моря, цифру соответствующую расстоянию
            return 'Сундук с сокровищами обнаружен на расстоянии %s от гидролокатора.' % (smallestDistance)
        else:
            board[x][y] = 'X' #в списки с морем отрисовываем вместо символа моря, Х т.к. ничего не нашли
            return 'Гидролокатор ничего не обнаружил. Все сундуки с сокровищами вне пределов досягаемости.'

# Функция хода игрока. Можно выйти в любой момент или сделать ход (ввести координаты)
def enterPlayerMove(previousMoves):
    print('Где следует опустить гидролокатор? (координаты: 0-59 0-14) (или введите "выход")')
    while True:
        move = input()
        if move.lower() == 'выход':
            print('Спасибо за игру!')
            sys.exit() #обрываем выполнение программы

        move = move.split()
        if len(move) == 2 and move[0].isdigit() and move[1].isdigit() and isOnBoard(int(move[0]), int(move[1])):
            if [int(move[0]), int(move[1])] in previousMoves:
                print('Здесь вы уже опускали гидролокатор.')
                continue
            return [int(move[0]), int(move[1])]

        print('Введите число от 0 до 59, потом пробел, а затем число от 0 до 14.')

# функция отображения инструкции к игре
def showInstructions():
    print('''Инструктаж:
Вы - капитан корабля, плывущего за сокровищами. Ваша задача - с помощью
гидролокаторов найти три сундука с сокровищами в затонувших судах на дне океана.
Но гидролокаторы очень просты и определяют только расстояние, но не направление.				
Введите координаты, чтобы опустить гидролокатор в воду. На карте будет показано
число, обозначающее, на каком расстоянии находится ближайший сундук. Или будет
показана буква "Х", обозначающая, что сундук в области действия гидролокатора не 
обнаружен. На карте отображенной ниже метки "C" - означают сундуки. 
Цифра 3 обозначает, что ближайший сундук находится на отдалении в 3 единицы.

                            1         2         3
                  012345678901234567890123456789012

                0 ~~~~`~```~`~``~~~``~`~~``~~~``~`~ 0
                1 ~`~`~``~~`~```~~~```~~`~`~~~`~~~~ 1
                2 `~`C``3`~~~~`C`~~~~`````~~``~~~`` 2
                3 ````````~~~`````~~~`~`````~`~``~` 3
                4 ~`~~~~`~~`~~`C`~``~~`~~~`~```~``~ 4

                  012345678901234567890123456789012		
                            1         2         3
(Во время игры сундуки на карте не обозначаются!!!)

Нажмите клавишу Enter, чтобы продолжить...''')
    input()

    print('''Если гидролокатор опущен прямо на сундук, вы сможете поднять
сундук. Другие гидролокаторы обновят данные о расположении ближайшего сундука.
Сундуки ниже находятся вне диапазона локатора, поэтому отображается буква X.		

                            1         2         3
                  012345678901234567890123456789012		

                0 ~~~~`~```~`~``~~~``~`~~``~~~``~`~ 0
                1 ~`~`~``~~`~```~~~```~~`~`~~~`~~~~ 1
                2 `~`X``7`~~~~`C`~~~~`````~~``~~~`` 2
                3 ````````~~~`````~~~`~`````~`~``~` 3
                4 ~`~~~~`~~`~~`C`~``~~`~~~`~```~``~ 4

                  012345678901234567890123456789012
                            1         2         3

Сундуки с сокровищами не перемещаются. Гидролокаторы определяют сундуки
на расстоянии до 9 единиц. Попробуйте поднять все 3 сундука до того, как все
гидролокаторы будут опущены на дно. Удачи!		

Нажмите клавишу Enter, чтобы продолжить...''')
    input()
# ======================================================================================================================================
# основное тело программы
print('Охотник за сокровищами!')
print()
print('Показать инструктаж? (да/нет)')
if input().lower().startswith('д'): # если первая буква введенного слова "д", то будет вызвана процедура отображения инструкции к игре
    showInstructions()

while True:
    # Настройка игры
    sonarDevices = 20 # задаем кол-во попыток (сонаров) в игре.
    theBoard = getNewBoard() # вызов функции для создания списка, по которому будет отрисовано море в игровом поле
    theChests = getRandomChests(3) # вызов функции создания рандомных координат сундуков в море. Передаем 3 - т.к. сундуков у нас 3
    drawBoard(theBoard) # теперь нарисуем само поле игры.
    previousMoves = [] # список ходов пользователя

    while sonarDevices > 0:
        print('Осталось гидролокаторов: %s. Осталось сундуков с сокровищами: %s.' % (sonarDevices, len(theChests)))

        x, y = enterPlayerMove(previousMoves) #вызов процедуры ввода координат сонара
        previousMoves.append([x, y])  # Записываем ход пользователя, чтобы он его потом не повторял

        moveResult = makeMove(theBoard, theChests, x, y) #запускаем проверку, куда попал игрок
        if moveResult == False:
            continue
        else:
            if moveResult == 'Вы нашли сундук с сокровищами на затонувшем судне!':
                # Обновляем отображение сонаров на карте
                for x, y in previousMoves:
                    makeMove(theBoard, theChests, x, y)
            drawBoard(theBoard)
            print(moveResult)

        if len(theChests) == 0:
            print('Вы нашли все сундуки с сокровищами на затонувших судах! Поздравляем и приятной игры!')
            break

        sonarDevices -= 1

    if sonarDevices == 0:
        print('Все гидролокаторы опущены на дно! Придется разворачивать корабль и')
        print('отправляться домой, в порт! Игра окончена.')
        print('Вы не нашли сундуки в следующих местах:')
        for x, y in theChests:
            print('	%s, %s' % (x, y))

    print('Хотите сыграть еще раз? (да или нет)')
    if not input().lower().startswith('д'):
        sys.exit()
